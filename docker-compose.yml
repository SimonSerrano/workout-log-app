
services:
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: api
    restart: always
    ports:
      - "${BACKEND_PORT}:8080"
    environment:
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network
      - frontend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    develop:
      watch:
        - path: ./backend
          action: rebuild
          target: /app

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:80"
    networks:
      - frontend_network
    develop:
      watch:
        - path: ./frontend
          action: rebuild
          target: /app
          ignore:
            - node_modules

  db:
    image: postgres:17
    container_name: db
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge
